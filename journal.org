# -*- coding: utf-8 -*-
#+STARTUP: overview indent inlineimages
#+TITLE:       Laboratory Notebook for a Multi-Threaded Version of Quicksort
#+AUTHOR:      Arnaud Legrand
#+LANGUAGE:    en
#+TAGS: IMPORTANT(i) TEST(t) DEPRECATED(d) noexport(n)

* Project Overview
This project aims at providing an efficient multi-threaded
implementation of the QuickSort algorithm on multi-core machines. This
document contains my attempts to evaluate the performance of an
implementation of such code.
* General Organization
** src/
This directory comprises the parallel implementation and a standard
Makefile to compile it.
** data/
This is where raw experimental data should go. Each directory entry
comprises a set of experiments and the directory name is based on the
machine name and on the date. For example:
#+begin_src sh :results output :exports both 
echo mkdir data/`hostname`_`date +%F`
#+end_src

#+RESULTS:
: mkdir data/sama_2014-10-13

* Typical usage
** Compilation
A simple makefile with various compilation options is provided in the
src/ directory. Compilation is thus done by running the following command:
#+begin_src sh :results output :exports both 
make -C src/
#+end_src

#+RESULTS:
: make: Entering directory '/home/alegrand/Work/Documents/Enseignements/M2R_Eval_Perf_13/M2R-ParallelQuicksort/src'
: cc   -g -Wall -Wshadow -Wcast-align -Waggregate-return -Wmissing-prototypes -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wmissing-noreturn -Wpointer-arith -Wwrite-strings -finline-functions -O0 -pthread -lrt -std=c99  -c -o parallelQuicksort.o parallelQuicksort.c
: cc   -g -Wall -Wshadow -Wcast-align -Waggregate-return -Wmissing-prototypes -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wmissing-noreturn -Wpointer-arith -Wwrite-strings -finline-functions -O0 -pthread -lrt -std=c99  parallelQuicksort.o  -o parallelQuicksort 
: make: Leaving directory '/home/alegrand/Work/Documents/Enseignements/M2R_Eval_Perf_13/M2R-ParallelQuicksort/src'

** Running the code
The code is quite simple at the moment and can be run in the following way:
#+begin_src
./src/parallelQuicksort [1000000]
#+end_src
When run, the code executes initializes an array of the size given in
argument (1000000 by default) with random integer values and sorts it
using:
1. a custom sequential implementation;
2. a custom parallel implementation;
3. the libc qsort function.
Times are reported in seconds.
* Experimental Reports
** 2014-10-13
*** Initial code design
- I obtained an initial implementation from
  http://sc12.supercomputing.org/hpceducator/PythonForParallelism/codes/parallelQuicksort.c.
  According to the header, the original author is Joshua Stough from
  Washington and Lee University. I hope he will not mind that I reuse
  this piece of code for educational purposes.
- Here is a typical first execution on my laptop (an Intel(R) Core(TM)
  i7 running a Debian with Linux 3.14.15):
  #+begin_src sh :results output :exports both 
    ./src/quicksort
  #+end_src

  #+RESULTS:
  : Sequential quicksort took: 0.231571 sec.
  : at loc 506315, 5.068226e-01 < 5.068269e-01 
  : Oops, lyst did not get sorted by parallelQuicksort.
  : Parallel quicksort took: 0.161259 sec.
  : Built-in qsort took: 0.241568 sec.

  Sweet, in my first attempt, it looks like this parallel version is
  indeed running faster than then sequential one. I have to say this
  warning message is stressing me a bit though.
- On smaller instances, the code would segfault. So I reindented the
  code and thanks to valgrind and gdb, I could find what was wrong. I
  also renamed the file so that compiling is more convenient. This
  fixed the previous warning message so now everything seems fine:
  #+begin_src sh :results output :exports both 
    ./src/parallelQuicksort
  #+end_src

  #+RESULTS:
  : Sequential quicksort took: 0.239347 sec.
  : Parallel quicksort took: 0.176365 sec.
  : Built-in quicksort took: 0.244716 sec.

*** First series of experiments
Let's try to see how the three algorithms behave when changing the 
array size. Since one measurement is not enough, I run the code 5
times in a row.
#+begin_src sh foo :results output :exports both :tangle scripts/run_benchmarking.sh
  OUTPUT_DIRECTORY=data/`hostname`_`date +%F`
  mkdir -p $OUTPUT_DIRECTORY
  OUTPUT_FILE=$OUTPUT_DIRECTORY/measurements_`date +%R`.txt

  touch $OUTPUT_FILE
  for i in 100 1000 10000 100000 1000000; do
      for rep in `seq 1 5`; do
          echo "Size: $i" >> $OUTPUT_FILE;
          ./src/parallelQuicksort $i >> $OUTPUT_FILE;
      done ;
  done
#+end_src
I obtained the following [[file:data/sama_2014-10-13/measurements_03:47.txt][output]].

*** A simple plot with R
Here is a simple script to parse the results:
#+begin_src perl :results output raw :exports both :tangle scripts/csv_quicksort_extractor.pl
  use strict;

  my($line);
  my($size);

  print "Size, Type, Time\n" ;
  while($line=<>) {
      chomp $line;
      if($line =~/^Size: ([\d\.]*)$/) {
          $size = $1;
          next;
      } 
      if($line =~/^(.*) quicksort.*: ([\d\.]*) sec.$/) {
          print "$size, \"$1\", $2\n" ;
          next;
      } 
  }
#+end_src

I can then simply parse my data with the following command:

#+begin_src sh :results output :exports both 
perl scripts/csv_quicksort_extractor.pl < data/sama_2014-10-13/measurements_03\:47.txt > data/sama_2014-10-13/measurements_03\:47.csv
#+end_src

#+RESULTS:

#+begin_src R :results output graphics :file data/sama_2014-10-13/measurements_03:47.png :exports both :width 600 :height 400 :session
  df <- read.csv("data/sama_2014-10-13/measurements_03:47.csv",header=T)
  plot(df$Size,df$Time,col=c("red","blue","green")[df$Type])
#+end_src

#+RESULTS:
[[file:data/sama_2014-10-13/measurements_03:47.png]]

Well, this is not particularly nice and some may not know/like R.
*** A simple plot with gnuplot
So let's try to parse in an other way and use gnuplot:

#+begin_src perl :results output raw :exports both :tangle scripts/csv_quicksort_extractor2.pl
  use strict;

  my($line);
  my($size);
  my($seq,$par,$libc);
  print "Size, Seq, Par, Libc\n" ;
  while($line=<>) {
      chomp $line;
      if($line =~/^Size: ([\d\.]*)$/) {
          $size = $1;
          next;
      } 
      if($line =~/^Sequential quicksort.*: ([\d\.]*) sec.$/) {
          $seq=$1; next;
      } 
      if($line =~/^Parallel quicksort.*: ([\d\.]*) sec.$/) {
          $par=$1; next;
      } 
      if($line =~/^Built-in quicksort.*: ([\d\.]*) sec.$/) {
          $libc=$1; 
          print "$size, $seq, $pqr, $libc\n";
          next;
      }
  }
#+end_src

#+begin_src sh :results output raw :exports both 
  FILENAME="data/sama_2014-10-13/measurements_03:47"
  perl scripts/csv_quicksort_extractor2.pl < "$FILENAME.txt" > "${FILENAME}_wide.csv"
  echo "
    set terminal png size 600,400 
    set output '${FILENAME}_wide.png'
    set datafile separator ','
    set key autotitle columnhead
    plot '${FILENAME}_wide.csv' using 1:2 with linespoints, '' using 1:3 with linespoints, '' using 1:4 with linespoints
  " | gnuplot
  echo [[file:${FILENAME}_wide.png]]
#+end_src

#+RESULTS:
[[file:data/sama_2014-10-13/measurements_03:47_wide.png]]

Well, I'm not sure it is nicer but I have lines. A first crude
analysis seems to reveal the the parallel version is worth it for
arrays larger than 400000.


** Some note about updated version.

*** Implementation, compiler and co.

The user must use an OpenMP 3.1 compliant compiler (e.g. gcc 4.7+). By default the Makefile uses CC, please use "CC=yourcompiler make" to use another default compiler.
The implementation is basically spawning tasks recursively until we reach a cutoff size where the sequential version is just better (which also avoid runtime overhead due to task creation). In this case the magic number is 10000.
- NOTE: gcc's libgomp was traditionally bad when dealing with recursive task creation, please use a "recent" version (5.2 seems fine).

For the record I used the GCC 5.2 release toolchain for my experiments.

*** Launching and thread control
- You can control the number of threads by specifying the ~OMP_NUM_THREADS~ environment variable, e.g. use : ~OMP_NUM_THREADS=4 ./src/parallelQuicksort~ to use 4 threads for parallelQuicksort.

- You can launch only the parallel version by specifying ~--noseq~ after the size, e.g. : ~OMP_NUM_THREADS=4 ./src/parallelQuicksort 1000000 --noseq~.

- To run a full bench of the program, with the parallel version using 2, 4, and 8 threads you can use : ~./scripts/run_benchmarking.sh "2 4 8"~ (make sure the sh has x mod).

- To convert the data file to R friendly format : ~perl ./scripts/csv_quicksort_extractor.pl < ./data/path/tomeasurements.txt > ./data/path/tordata.dat~

- To generate *very* basic graphs to compare sequential implementations, and the performances evolution of the parallel version (on list of size > 1000000), you can run ~Rscript scripts/gen_graph.R path/to/sample.dat~.
  The script will generate ~sample.dat.sequential.pdf~ and ~sample.dat.parallel.pdf~ in the original directory, containing the corresponding graph.

*** Notes and TODOs
- Look at how task-generation cutoff impact the parallel time
- Look at different runtimes, e.g. other LibGOMP version, LibIOMP, libKOMP.

- The bottleneck of the parallel implementation is the partitioning function, so to actually get good performance, one should look at an hypercube implementation of quicksort.
  (i.e. given 2^N cores, dispatch the work evenly among cores, then merge the results).
  cf: http://www.ijcaonline.org/archives/volume57/number9/9142-3363


*** Sample graphs on my personal computer

- Spec :
  * Intel i7-3720QM CPU @ 2.60GHz, Linux 4.2
  * 4 physical cores, 2 logical cores (hyperthreads) per core.

(png generated with convert from the pdf file)

[[file:./data/daisy_2015-12-15/sample.dat.sequential.png]]

Note: This nicely shows the overhead of the parallel version on one core against the sequential version.

[[file:./data/daisy_2015-12-15/sample.dat.parallel.png]]

Here a high standard deviation could be noise from other application, or the program being scheduled on hyperthreads. ~OMP_PLACES~ could be used to specify precisely which cores to use (e.g. ~OMP_PLACES="{0}:4:2"~ to have 4 places starting at cores number 0 with a stride of 2).


*** Sample graphs on a huge machine

- Spec :
  * Intel Xeon E5-4640 @ 2.4 GHz, Sandy Bridge, Linux 3.0
  * 24 Numa nodes, 8 cores per node, 192 total cores

[[file:./data/idchire_2015-12-15/sample.dat.sequential.png]]

Note: same remark about overhead

[[file:./data/idchire_2015-12-15/sample.dat.parallel.png]]

Here the high standard deviation for small number of threads may be due to the input list ?

Note : ploting speedup could be nice to normalize the view

Note: looking at thread activity/speedup, it's obvious that the parallel version is actually bad (but it's probably enough for a personnal computer !)
